// src/controllers/ChatController.ts
import { ChatModel } from '../models/ChatModel';
import { DatabaseModel } from '../models/DatabaseModel';
import { LangChainService } from '../services/LangChainService';
import { ChromaService } from '../services/ChromaService';
import { OpenAIService } from '../services/OpenAIService';
import { ChatResponse } from '../models/types';

export class ChatController {
  private chatModel: ChatModel;
  private databaseModel: DatabaseModel;
  private langChainService: LangChainService;

  constructor(
    chatModel: ChatModel,
    databaseModel: DatabaseModel,
    langChainService: LangChainService
  ) {
    this.chatModel = chatModel;
    this.databaseModel = databaseModel;
    this.langChainService = langChainService;
  }

  async sendMessage(message: string): Promise<void> {
    try {
      // ÏÇ¨Ïö©Ïûê Î©îÏãúÏßÄ Ï∂îÍ∞Ä
      this.chatModel.addMessage({
        content: message,
        sender: 'user',
      });

      // Î°úÎî© ÏÉÅÌÉú ÏÑ§Ï†ï
      this.chatModel.setLoading(true);
      this.chatModel.setError(null);

      // Í≤ÄÏ¶ù
      if (!this.validateMessage(message)) {
        throw new Error(
          'Î©îÏãúÏßÄÍ∞Ä Ïò¨Î∞îÎ•¥ÏßÄ ÏïäÏäµÎãàÎã§. ÎäòÎ¥ÑÌïôÍµê ÏóÖÎ¨¥ Í¥ÄÎ†® ÏßàÎ¨∏ÏùÑ Ìï¥Ï£ºÏÑ∏Ïöî.'
        );
      }

      // LangChainÏùÑ ÌÜµÌï¥ ÎãµÎ≥Ä ÏÉùÏÑ±
      const response: ChatResponse = await this.langChainService.processQuery(
        message
      );

      // Î¥á ÏùëÎãµ Ï∂îÍ∞Ä
      this.chatModel.addMessage({
        content: this.formatBotResponse(response),
        sender: 'bot',
      });
    } catch (error) {
      console.error('Chat error:', error);
      this.chatModel.setError(
        error instanceof Error
          ? error.message
          : 'Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.'
      );
    } finally {
      this.chatModel.setLoading(false);
    }
  }

  private validateMessage(message: string): boolean {
    if (!message || message.trim().length === 0) {
      return false;
    }

    if (message.length > 1000) {
      return false;
    }

    // ÏöïÏÑ§Ïù¥ÎÇò Î∂ÄÏ†ÅÏ†àÌïú ÎÇ¥Ïö© ÌïÑÌÑ∞ÎßÅ (Í∞ÑÎã®Ìïú ÏòàÏãú)
    const inappropriateWords = ['ÏöïÏÑ§1', 'ÏöïÏÑ§2']; // Ïã§Ï†úÎ°úÎäî Îçî Ìè¨Í¥ÑÏ†ÅÏù∏ ÌïÑÌÑ∞ ÌïÑÏöî
    const lowerMessage = message.toLowerCase();

    return !inappropriateWords.some((word) => lowerMessage.includes(word));
  }

  private formatBotResponse(response: ChatResponse): string {
    let formattedResponse = response.answer;

    // Ïã†Î¢∞ÎèÑÍ∞Ä ÎÇÆÏùÄ Í≤ΩÏö∞ Í≤ΩÍ≥† Î©îÏãúÏßÄ Ï∂îÍ∞Ä
    if (response.confidence < 50) {
      formattedResponse +=
        '\n\n‚ö†Ô∏è Ïù¥ ÎãµÎ≥ÄÏùò Ïã†Î¢∞ÎèÑÍ∞Ä ÎÇÆÏäµÎãàÎã§. Ï†ïÌôïÌïú Ï†ïÎ≥¥Îäî Îã¥ÎãπÏûêÏóêÍ≤å Î¨∏ÏùòÌï¥Ï£ºÏÑ∏Ïöî.';
    }

    // Ï∂úÏ≤ò Ï†ïÎ≥¥ Ï∂îÍ∞Ä
    if (response.sources.length > 0) {
      formattedResponse += '\n\nüìö Ï∞∏Í≥† ÏûêÎ£å:';
      response.sources.slice(0, 3).forEach((source, index) => {
        const sourceInfo = source.metadata.source || `Î¨∏ÏÑú ${index + 1}`;
        formattedResponse += `\n‚Ä¢ ${sourceInfo}`;
      });
    }

    return formattedResponse;
  }

  clearChat(): void {
    this.chatModel.clearMessages();
    this.chatModel.setError(null);
  }

  getChatState() {
    return this.chatModel.getState();
  }

  subscribeToChatUpdates(callback: (state: any) => void) {
    return this.chatModel.subscribe(callback);
  }
}
